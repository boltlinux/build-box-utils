#!/usr/bin/env python3
# -*- encoding: utf-8 -*-
#
# The MIT License (MIT)
#
# Copyright (c) 2017 Tobias Koch <tobias.koch@nonterra.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

import os
import sys

# make bbox relocatable
INSTALL_DIR = os.path.normpath(os.path.dirname(
    os.path.realpath(sys.argv[0])) + os.sep + ".." )
sys.path.insert(1, INSTALL_DIR + os.sep + 'lib')

from com.nonterra.buildbox.error import BBoxError

BBOX_VERSION = "1.0.0"
BBOX_ERR_INVOCATION = 1
BBOX_ERR_RUNTIME    = 2

def print_usage():
    print(
        "Build Box NG Management Utility, Version %s                         \n"
        "Copyright (c) 2017 Tobias Koch <tobias.koch@nonterra.com>           \n"
        "                                                                    \n"
        "Usage: bbox <command> [ARGS]                                        \n"
        "                                                                    \n"
        "COMMANDS:                                                           \n"
        "                                                                    \n"
        "  create   Create new target.                                       \n"
        "  list     List all existing targets.                               \n"
        "  login    Chroot into a target.                                    \n"
        "  mount    Mount /home and special file systems (dev, proc, sys).   \n"
        "  umount   Unmount /home and special file systems.                  \n"
        "  run      Execute a command chrooted inside a target.              \n"
        % BBOX_VERSION
    )
#end function

def bbox_do(*args):
    sys.stdout.flush()
    sys.stderr.flush()

    try:
        os.execvp("bbox-do", args)
    except OSError as e:
        sys.stderr.write("bbox: error calling bbox-do: %s.\n" % str(e))
        sys.exit(BBOX_ERR_RUNTIME)
    #end try
#end function

if __name__ == "__main__":
    try:
        if len(sys.argv) < 2:
            print_usage()
            sys.exit(BBOX_ERR_INVOCATION)
        #end if

        command = sys.argv[1]

        if command in ["list", "login", "mount", "umount", "run"]:
            bbox_do(command, *sys.argv[1:])
        elif command == "create":
            pass
        elif command in ["--help", "-h"]:
            print_usage()
        else:
            sys.stderr.write("bbox: unknown command '%s'.\n" % command)
            sys.exit(BBOX_ERR_INVOCATION)
        #end if
    except KeyboardInterrupt:
        sys.stderr.write("Caught keyboard interrupt. Exiting.\n")
        sys.exit(0)
    #end try
#end __main__
